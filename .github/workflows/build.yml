# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven | stock-managment

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  create-folder:
    name: create-folder
    runs-on: ubuntu-latest
    steps:
      - name: create folder on remote VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            mkdir -p /opt/apps/stock
            rm -r /opt/apps/stock/target/stockapps.jar
  #          script: whoami
  build-project:
    runs-on: ubuntu-latest
    needs: create-folder
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: '1.8'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        run: mvn -Dmaven.test.skip=true package --file pom.xml
      - name: rename jar
        run: mv target/*.jar target/stockapps.jar
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "target/stockapps.jar"
          target: /opt/apps/stock
  run-script:
    name: run-script
    runs-on: ubuntu-latest
    needs: build-project
    steps:
      - name: create java app has service
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            systemctl start stock.service